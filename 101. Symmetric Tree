// use 2 if return false is faster than 1.
class Solution {
public:
    bool mirror(TreeNode *leftNode, TreeNode *rightNode){
        if(!leftNode && !rightNode) return true;
        // if(!leftNode || !rightNode || leftNode->val != rightNode->val) return false;
        if(!leftNode || !rightNode) return false;
        if(leftNode->val != rightNode->val) return false;
        return mirror(leftNode->left, rightNode->right) && mirror(leftNode->right, rightNode->left);
    }

    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        return mirror(root->left, root->right);
    }
};

// class Solution {
// public:
//     bool isSymmetric(TreeNode* root) {
//         queue<TreeNode*> q;
//         q.push(root->left);
//         q.push(root->right);
//         while(!q.empty()){
//             TreeNode* leftNode = q.front();
//             q.pop();
//             TreeNode* rightNode = q.front();
//             q.pop();
//             if(!leftNode && !rightNode) continue;
//             if(!leftNode || !rightNode || leftNode->val != rightNode->val) return false;
//             q.push(leftNode->left);
//             q.push(rightNode->right);
//             q.push(leftNode->right);
//             q.push(rightNode->left);
//         }
//         return true;
//     }
// };
