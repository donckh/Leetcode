/* Question: build a vertor to represent every level of tree by zigzag direction
1. go through every tree node with queue
2. push every node value to vector
3. check direction need to reverse or not
4. push to result

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if(!root) return result;
        vector<int> level;
        queue<TreeNode*> q;
        q.push(root);
        bool dir = false;
        while(!q.empty()){
            int size = q.size();
            level.clear();
            for(int i=0; i<size; i++){
                TreeNode* curr = q.front(); q.pop();
                if(curr->left) q.push(curr->left);
                if(curr->right) q.push(curr->right);
                level.push_back(curr->val);
            }
            if(dir) reverse(level.begin(), level.end());
            result.push_back(level);
            dir = !dir;
        }
        return result;
    }
};

//Time Complexity: O(n), Space Complexity: O(n)
//BFS (refer to 102. Binary Tree Level Order Traversal)
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(!root) return ans;
        queue<TreeNode*> q;
        q.push(root);
        int cnt=0, size;
        while(!q.empty()){
            size=q.size();
            vector<int> temp;
            while(size--){
                TreeNode* node = q.front();
                temp.push_back(node->val);
                q.pop();
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            if(cnt%2==0) ans.push_back(temp);
            else{
                reverse(temp.begin(), temp.end());  //reverse if odd 
                ans.push_back(temp);
            }
            cnt++;
        }
        return ans;
    }
};
