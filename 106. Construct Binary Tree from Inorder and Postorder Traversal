/* Question: build a BST according to POSTorder and inorder tree
1. mark the inorder val and it's index as umap
2. build function for bst
    1) if index of inorder > root index, return null
    2) build a new root from POSTorder (&index), start from right because of postorder
    3) update a new root for next tree node(inEnd)
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map <int,int> umap;
public:
    TreeNode* bst(vector<int>& inorder, vector<int>& postorder, int inStart, int inEnd, int &po){
        if(inStart>inEnd) return nullptr;
        TreeNode* root = new TreeNode(postorder[po]);
        po--;
        int rt = umap[root->val];
        root->right = bst(inorder, postorder, rt+1, inEnd, po);
        root->left = bst(inorder, postorder, inStart, rt-1, po);
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int inStart = 0, inEnd = inorder.size(), po = postorder.size()-1;
        for(int i=0; i<inEnd; i++) umap[inorder[i]] = i;
        return bst(inorder, postorder, inStart, inEnd-1, po);
    }
};
