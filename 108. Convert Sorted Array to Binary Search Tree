/* Question: create Binary Searching Tree for given vector
1. build a treenode function
2. take the mid of vector and create a treenode
3. dfs the treenode left(start to mid-1) and right(mid+1 to end)
4. return root
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* bst(vector<int>& nums, int start, int end){
        if(start>end) return nullptr;
        int mid = (start + end) / 2;
        TreeNode* rt = new TreeNode(nums[mid]);
        rt->left = bst(nums, start, mid-1);
        rt->right = bst(nums, mid+1, end);
        return rt;
    }

    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return bst(nums, 0, nums.size()-1);
    }
};


// class Solution {
// public:
//     void BST(vector<int> &nums, int start, int end, TreeNode *&parent){
//         if(start>end) return;
//         int mid = (end + start)/2;
//         parent = new TreeNode(nums[mid]);  //last loop parent left/right assign new Tree Node
//         BST(nums, start, mid-1, parent->left);  // input parent->left for next loop parent=new TreeNode
//         BST(nums, mid+1, end, parent->right);  // inside parent->left BST: e=mid-1, e.g.: (loc)mid=0, e=2-1=1
//     }
//     TreeNode* sortedArrayToBST(vector<int>& nums) {
//         TreeNode *root = NULL;  // first loop, given val = null for inside BST assign n = new TreeNode
//         BST(nums, 0, nums.size()-1, root);
//         return root;
//     }
// };
