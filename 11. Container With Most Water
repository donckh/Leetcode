// Time Complexity: O(n), Space Complexity: O(1)
class Solution {
public:
    int maxArea(vector<int>& height) {
        int area=0, i=0, j=height.size()-1;
        while(i<j){
            int temp = min(height[i], height[j]) * (j-i);
            area = max(area, temp);
            // area = max(area, min(height[i], height[j]) * (j-i));
            if(height[i]<height[j]){ 
                // area = max(area, height[i]*(j-i));
                i++;
            }
            else{ 
                // area = max(area, height[j]*(j-i));
                j--;
            }
        }
        return area;
    }
};


// /*Question: find two sum index to return
// 1. use 2 index from begining and end
// 2. minus 1 index if too large, plus 1 index if too small
// 3. return result if reach
// */
// class Solution {
// public:
//     vector<int> twoSum(vector<int>& numbers, int target) {
//         int sum, i=0, j=numbers.size()-1;
//         while(i<j){
//             sum = numbers[i] + numbers[j];
//             if(sum==target) return {i+1, j+1};
//             if(sum>target) j--;
//             else i++;
//         }
//         return {-1, -1};
//     }
// };
