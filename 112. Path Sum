/* Question: check if root to left val sum equal to target sum
1. return false if root is nullptr;
2. check if node is leaf, if yes, check sum == target sum
3. recursive at left and right leaf
4. return either leaf contain true
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(root==nullptr) return false;
        int remain = targetSum - root->val;
        if(root->left==nullptr && root->right==nullptr) //check only no path node(which is leaf)
            return remain==0;
        bool left = hasPathSum(root->left, remain);
        bool right = hasPathSum(root->right, remain);
        return left||right;
    }
};
