/* Question: fint the max path sum(root/sub-root itself or path between two nodes)
1. define a maxSum
2. build a pathSum function:
    1) find the max sum of left leaf.
    2) find the max sum of right leaf.
    3) check if this node is max sum path.
    return max path(left or right)
3. return maxSum
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int maxSum = INT_MIN;

public:
    int pathSum(TreeNode* root){
        if(root==nullptr) return 0;
        int lSum = max(pathSum(root->left), 0);
        int rSum = max(pathSum(root->right), 0);

        int localSum = lSum + rSum + root->val;
        maxSum = max(maxSum, localSum);
        return root->val + max(lSum, rSum);
    }

    int maxPathSum(TreeNode* root) {
        pathSum(root);
        return maxSum;
    }
};
