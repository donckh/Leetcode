// class Solution {
// public:
//     bool isPalindrome(string s) {
//         int len = s.length(), i=0, j = s.length() - 1;
//         bool found = true;
//         while(i<len && j>0){
//             if(isdigit(s[i]) && isdigit(s[j])){
//                 if(s[i]!=s[j]){
//                     found = false;
//                     break;
//                 }
//                 i++;
//                 j--;
//             }
//             else if(isdigit(s[i]) && isalpha(s[j]) || isalpha(s[i]) && isdigit(s[j])){
//                 found = false;
//                 break;
//                 // i++;
//                 // j--;
//             }   
//             else if(isalpha(s[i]) && isalpha(s[j])){
//                 if(s[i]!=s[j] && s[i]+32!=s[j] && s[i]!=s[j]+32){
//                     found = false;
//                     break;
//                 }
//                 i++;
//                 j--;
//             }
//             else if(isalpha(s[i]) || isdigit(s[i])) {
//                 j--;
//                 // found = false;
//             }
//             else if(isalpha(s[j]) || isdigit(s[j])) i++;
//             else{
//                 i++;
//                 j--;
//                 continue;
//             }
//         }
//         return found;
//     }
// };

//isalnum can check Alphanumeric char, tolower to ensure all Uppercase convert to Lower case and omit numeric
class Solution {
public:
    bool isPalindrome(string s) {
        int len = s.length(), i=0, j = s.length() - 1;
        bool found = true;
        while(i<len && j>0){
            if(!isalnum(s[i]) && !isalnum(s[j])){ //use !isalnum faster than isalnum
                i++;
                j--;
                continue;
            }
            else if(!isalnum(s[i])) i++;
            else if(!isalnum(s[j])) j--;
            else{
                if(tolower(s[i])!=tolower(s[j])){
                    found = false;
                    break;
                }
                i++;
                j--;
            } 
        }
        return found;
    }
};
