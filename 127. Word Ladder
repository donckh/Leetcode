/* Question: given string start, check the step which start change to end(every step can change only 1 char)
1. use uset to check every step is valid
2. create a queue to run BFS (record every step and element)
3. use visited to skip all string which already visited
4. check every char of string with a-z
5. skip if char it the same
6. check if the new change is valid or visited
7. record in queue for next loop
8. return 0 if not found
*/

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> set(wordList.begin(), wordList.end());
        if(!set.count(endWord)) return 0;
        queue<pair<string, int>> q;
        unordered_set <string> visited;

        q.push({beginWord, 1});
        visited.insert(beginWord);

        while(!q.empty()){
            auto [curr, step] = q.front(); q.pop();
            if(curr == endWord) return step;
            for(int i=0; i<curr.size(); i++){
                char original = curr[i];
                for (char c = 'a'; c <= 'z'; ++c) {
                    if(original==c) continue;
                    curr[i] = c;

                    if(set.count(curr) && !visited.count(curr)){
                        q.push({curr, step+1});
                        visited.insert(curr);
                    }
                }
                curr[i] = original;
            }
        }
        return 0;
    }
};
