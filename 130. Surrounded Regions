//Time Complexity: O(n), Space Complexity: O(1)
// Sol: check edge 'O' and it's neighbour, remain 'O'. Others turn to 'X'.
class Solution {
public:
    void dfs(vector<vector<char>>& board, int i, int j, int m, int n){
        if(i<0 || i>=m || j<0 || j>=n) return;
        if(board[i][j]=='X' || board[i][j]=='E') return;
        board[i][j] = 'E';  //edge O or neighbour of edge
        dfs(board, i-1, j, m, n);
        dfs(board, i+1, j, m, n);
        dfs(board, i, j-1, m, n);
        dfs(board, i, j+1, m, n);
    }
    void solve(vector<vector<char>>& board) {
        int m=board.size(), n=board[0].size();
        // vector<vector<bool>> arr(m, vector<bool>(n, false));
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if((i==0 || i==m-1 || j==0 || j==n-1) && board[i][j]=='O') //check those O at edge
                  dfs(board, i, j, m, n);  //check neighbour of edge O
            }
        }
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(board[i][j]=='O') board[i][j]='X'; //remain O NOT at edge
                else if(board[i][j]=='E') board[i][j]='O';  // edge O remain O
            }
        }
    }
};
