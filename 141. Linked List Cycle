/**
 * Definition for singly-linked list. 
 * struct ListNode {
 *     int val;  // linked_list: head->val
 *     ListNode *next;  // linked_list: head->next
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
// use 2 different step pointers: if loop exists, 2 pointers will be equal at some time.
class Solution {
public:
    bool hasCycle(ListNode *head) {
        std::unordered_set<long int> uset;
        ListNode *slow=head, *fast=head;
        while(slow!=NULL && fast->next!=NULL && fast->next->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
            if(slow==fast) return true;
        }
        return false;
    }
};
