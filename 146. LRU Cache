/* Question: build a data structure to get, put data in O(1), less recently use data will be erase if over capacity.
1. buiild a pair list, which can be insert, erase, exchange data in O(1)
2. use umap to check key exist or not
3. do list operation:
    get:
    1)if exist return and move key to the begin
    2) return -1 if not
    put:
    1) if exist key, update value to move to begin
    2) if oversize, remove the last element from the list and add the new one in begining
*/

//Time Complexity: O(n), Space Complexity: O(n)
class LRUCache {
public:
    unordered_map <int, pair<list<int>::iterator, int>> umap;  
    // <key, pair<list::iterator, value>, iter: location of element at list
    list<int> lru;
    int size;
    LRUCache(int capacity) {
        size = capacity;
    }
    
    void moveToFirst(int key){
        lru.erase(umap[key].first);  //remove key in list according to location of key
        lru.push_front(key);  //add key in the front
        umap[key].first = lru.begin();
    }

    int get(int key) {
        if(umap.find(key)!=umap.end()){
            moveToFirst(key);
            return umap[key].second;
        }
        else return -1;
    }
    
    void put(int key, int value) {
        if(umap.find(key)!=umap.end()){
            umap[key].second = value;  // update value
            moveToFirst(key);
        }
        else{
            lru.push_front(key);
            umap[key] = {lru.begin(), value};
            size--;
        }
        if(size<0){
            umap.erase(lru.back());
            lru.pop_back();
            size++;
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
