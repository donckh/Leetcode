/* Question: sort the given listnode in ascending order
1. split the listnode to two until only 1 node
2. merge the node
    1) compare value (smaller one first)
    2) attach remain list
3. return result
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;
        
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* prev = nullptr;
        while(fast && fast->next){
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        prev->next = nullptr;
        ListNode* l1 = sortList(head);
        ListNode* l2 = sortList(slow);

        return merge(l1, l2);
    }

    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode dummy;
        ListNode* tail = &dummy;
        while(l1&&l2){
            if(l1->val < l2->val){
                tail->next = l1;
                l1 = l1->next;
            }
            else{
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        tail->next = l1 ? l1 : l2;

        return dummy.next;
    }
};


//Time Complexity: O(nlogn), Space Complexity: O(n)
//reference: https://leetcode.com/problems/sort-list/solutions/3417365/c-java-python-javascript-memory-o-1-3-approaches-linked-list/
// class Solution {
// public:
//     ListNode* sortList(ListNode* head) {
//         if(!head) return head;
//         vector<int> vec;
//         while(head){
//             vec.push_back(head->val);
//             head = head->next;
//         }
//         sort(vec.begin(), vec.end());
//         ListNode* start = new ListNode(vec[0]);
//         ListNode* prev = start;
//         for(int i=1; i<vec.size(); i++){
//             ListNode* cur = new ListNode(vec[i]);
//             prev->next = cur;
//             prev = prev->next;
//         }
//         return start;
//     }
// };

//Time Complexity: O(nlogn), Space Complexity: O(logn)
// //use slow fast pointer to split to 2 list, merge 2 sort list after sorted
// class Solution {
// public:
//    ListNode* middle(ListNode* head) {
//         ListNode* slow = head;
//         ListNode* fast = head -> next;
//         while(fast && fast -> next){
//             slow = slow -> next;
//             fast = fast ->next -> next;
//         }
//         return slow;
//     }

//     ListNode* merge(ListNode* list1, ListNode* list2) {
//         ListNode* head;
//         ListNode* tail;
//         if(!list1){
//             return list2;
//         }
//         if(!list2){
//             return list1;
//         }
//         if(list1 -> val > list2 -> val){
//             head = tail = list2;
//             list2 = list2 -> next;
//         }
//         else{
//             head = tail = list1;
//             list1 = list1 -> next;
//         }
//         while(list1 && list2){
//             if(list1 -> val > list2 -> val){
//                 tail -> next = list2;
//                 tail = tail -> next;
//                 list2 = list2 -> next;
//             }
//             else{
//                 tail -> next = list1;
//                 tail = tail -> next;
//                 list1 = list1 -> next;
//             }
//         }
//         while(list1){
//             tail -> next = list1;
//                 tail = tail -> next;
//                 list1 = list1 -> next;
//         }
//         while(list2){
//            tail -> next = list2;
//                 tail = tail -> next;
//                 list2 = list2 -> next; 
//         }
//         return head;
//     }

//     ListNode* sortList(ListNode* head) {
//         if(!head || !head -> next){
//             return head;
//         }
//         ListNode* mid = middle(head);  // Find the middle node using slow and fast pointers
//         ListNode* temp = mid -> next;
//         mid -> next = NULL;  // Break the list into two halves
//         ListNode* head1 = sortList(head);  // Sort the first half
//         ListNode* head2 = sortList(temp);  // Sort the second half
//         return merge(head1,head2);  // Merge the sorted halves
//     }
// };
