/* Question: find the best value for k transactions
1. if k>=n: 
    1) we can trade all the time.
    2) sum all profit and return
2. initial dp and best
3. store the max of sell today or hold
4. update best: find the max of buy today or not
5. return dp result
*/

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        if(n==1) return 0;
        int sum = 0;
        if(k>=n/2){
            for(int i=1; i<n; i++){
                if(prices[i-1] < prices[i]) sum += prices[i] - prices[i-1];
            }
            return sum;
        }

        vector<vector<int>> dp(k+1, vector<int> (n, 0));

        for(int i=1; i<=k; i++){
            int best = -prices[0];
            for(int j=1; j<n; j++){
                dp[i][j] = max(dp[i][j-1], best + prices[j]);
                best = max(best, dp[i-1][j] - prices[j]);
            }
        }
        return dp[k][n-1];
    }
};
