/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
// Time Complexity: O(n), Space Complexity: O(n)
// class Solution {
// public:
//     ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
//         ListNode* ans = new ListNode(), *temp = ans;
//         int carry = 0, sum;
//         while(l1 || l2 || carry){
//             sum = 0;
//             if(l1){
//                 sum += l1->val;
//                 l1 = l1->next;
//             }
//             if(l2){
//                 sum += l2->val;
//                 l2 = l2->next;
//             }
//             sum += carry;
//             carry = sum/10;
//             ListNode *node = new ListNode(sum%10);
//             temp->next = node;
//             temp = temp->next;
//         }
//         return ans->next;
//     }
// };

// Time Complexity: O(n), Space Complexity: O(n)
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans = new ListNode(), *temp = ans;
        int carry = 0, sum, val1, val2;
        while(l1 || l2 || carry){
            val1 = l1? l1->val: 0;
            val2 = l2? l2->val: 0;
            sum = val1 + val2 + carry;
            carry = sum/10;
            ListNode *node = new ListNode(sum%10);
            temp->next = node;
            temp = temp->next;
            l1 = l1? l1->next:nullptr;
            l2 = l2? l2->next:nullptr;
        }
        return ans->next;
    }
};
