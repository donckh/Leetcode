// space complexity: hash table
// class Solution {
// public:
//     bool isHappy(int n) {
//         std::unordered_map<int, int> umap;
//         int temp = n;
//         while(n>0){
//             if(n==1) return true;
//             umap[n]++;
//             if(umap[n]>1) break;
//             n = 0;
//             while(temp>0){
//                 n += (temp%10)*(temp%10);
//                 temp/=10;
//             }
//             temp = n;
//         }
//         return false;
//     }
// };

//hash table: unordered_set
// class Solution {
// public:
//     bool isHappy(int n) {
//         std::unordered_set<int> uset;
//         int temp = n;
//         while(n>0){
//             if(n==1) return true;
//             if(uset.count(n)) break;
//             uset.insert(n);
//             n = 0;
//             while(temp>0){
//                 n += (temp%10)*(temp%10);
//                 temp/=10;
//             }
//             temp = n;
//         }
//         return false;
//     }
// };

// space complexity: constant
class Solution {
public:
    int nextNum(int num){
        int temp = 0;
        while(num>0){
            temp += (num%10)*(num%10);
            num/=10;
        }
        return temp;
    }
    bool isHappy(int n) {
        int slow = n, fast = nextNum(n);
        // int slow = n, fast = n;
        while(fast!=1 && slow !=1 && slow!=fast){

            slow = nextNum(slow);
            fast = nextNum(nextNum(fast));
            // if(slow==fast) break;
        }
        return fast==1;
    }
};
