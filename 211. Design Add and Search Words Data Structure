/*Question: build a word data structure which contain insert and search function(including search '.')
1. build a TrieNode
2. insert word to TrieNode
3. use DFS or BFS to search including '.'
*/
class TrieNode{
    public:
    bool end;
    TrieNode* child[26];
    TrieNode(){
        end = false;
        for(int i=0; i<26; i++) child[i] = nullptr;
    }
};

class WordDictionary {
    TrieNode* root;
public:
    WordDictionary() {
        root = new TrieNode();
    }
    
    void addWord(string word) {
        TrieNode* curr = root;
        for(char c: word){
            int i = c - 'a';
            if(!curr->child[i]) curr->child[i] = new TrieNode();
            curr = curr->child[i];
        }
        curr->end = true;
    }
    
    bool search(string word) {
        return dfs(word, 0, root);
    }

private:
    bool dfs(string word, int idx, TrieNode* curr){
        if(!curr) return false;
        if(idx == word.size()) return curr->end;
        char c = word[idx];
        if(c=='.'){
            for(int i=0; i<26; i++){
                if(dfs(word, idx+1, curr->child[i])) return true;
            }
            return false;
        }
        else{
            return dfs(word, idx+1, curr->child[c - 'a']);
        }
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
