// // struct TreeNode {
// //     int val;
// //     TreeNode *left;
// //     TreeNode *right;
// //     TreeNode() : val(0), left(nullptr), right(nullptr) {}
// //     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
// //     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
// // };
// method 1: BST
// class Solution {
// public:
//     void BST(vector<int> &nums, int start, int end, TreeNode *&parent){
//         if(start>end) return;
//         int mid = (end + start)/2;
//         parent = new TreeNode(nums[mid]);
//         BST(nums, start, mid-1, parent->left);
//         BST(nums, mid+1, end, parent->right);
//     }
//     TreeNode* sortedArrayToBST(vector<int>& nums) {
//         TreeNode *root = NULL;
//         BST(nums, 0, nums.size()-1, root);
//         return root;
//     }
//     int findKthLargest(vector<int>& nums, int k) {
//         sort(nums.begin(), nums.end());
//         TreeNode *tree = sortedArrayToBST(nums);
//         int start = 0;
//         int end = nums.size()-1;
//         int loc = (end)/2; 
//         while(k!=nums.size()-loc){
//             if (k<nums.size()-loc){
//                 tree=tree->right;
//                 start = loc+1;
//                 loc = (start+end)/2;
//             }
//             else{
//                 tree=tree->left;
//                 end = loc-1;
//                 loc = (start+end)/2;
//             }
//         }
//         return tree->val;
//     }
// };
// method 2: sort and return
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        return nums[nums.size()-k];
    }
};
