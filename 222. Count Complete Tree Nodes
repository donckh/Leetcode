/*Question: count the tree node
1. check the height of tree on both left and right
    1) check the end of left
    2) check the end of right
2. use formula if height of left and right are equal (complete tree)
3. recursive the node if not complete tree
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countHeight(TreeNode* root, bool left){
        int h = 0;
        while(root){
            h++;
            root = left ? root -> left : root -> right; //check if count left or right: count the end of left/right
        }
        return h;
    }

    int countNodes(TreeNode* root) {
        if(!root) return 0;
        int hl = countHeight(root, true);
        int hr = countHeight(root, false);
        if(hl==hr) return (1<<hr) - 1; //use equation if left height == right height
        return 1 + countNodes(root->left) + countNodes(root->right);
    }
};
