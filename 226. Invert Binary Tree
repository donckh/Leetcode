/* Question: inverse all left and right node
1. write a recusive loop
    1) if node!= nullptr exchange left and right node
    2) place the right node to recursive and return to left node
    3) place the left node to recursive and return to right node
    return current node
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        TreeNode* curr = root;
        if(root==nullptr) return nullptr;
        else{
            TreeNode * temp = curr->left;
            curr->left = invertTree(curr->right);
            curr->right = invertTree(temp);
            return curr;
        }
        return invertTree(root);
    }
};
