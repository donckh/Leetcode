/* Question: sort the given k-lists to 1 list and all listnode in ascending order
1. split the listnode to two until only 1 node
    1) Divide & Conquer(mid = (start+end) / 2)
    2) recursive until only 2 list left
2. merge the node
    1) compare value (smaller one first)
    2) attach remain list
3. return result
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeList(ListNode* l1, ListNode* l2){
        ListNode dummy;
        ListNode* curr = &dummy;
        while(l1 && l2){
            if(l1->val < l2->val){
                curr->next = l1;
                l1 = l1->next;
            }
            else{
                curr->next = l2;
                l2 = l2->next;
            }
            curr = curr->next;
        }
        curr->next = l1 ? l1 : l2;
        return dummy.next;
    }

    ListNode* divideList(vector<ListNode*>& list, int left, int right){
        if(left>right) return nullptr;
        if(left==right) return list[left];
        int mid = (left + right) / 2;
        ListNode* l1 = divideList(list, left, mid);
        ListNode* l2 = divideList(list, mid+1, right);
        return mergeList(l1, l2);
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return nullptr;
        return divideList(lists, 0, lists.size()-1);
    }
};
