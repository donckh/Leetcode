230. Kth Smallest Element in a BST
/* Question: find the kth node value in TreeNode
1. build a function to search by inorder
2. k-- before check if kth node by k==0
3. return right tree node for searching remain nodes
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findK(TreeNode* root, int &k){
        if(!root) return -1;
        int left = findK(root->left, k);
        if(k==0) return left; //for quick return, prevent cover up by others
        k--;
        if(k==0) return root->val;
        return findK(root->right, k); //search in right
    }

    int kthSmallest(TreeNode* root, int k) {
        return findK(root, k);
    }
};
