// Time Complexity: O(2nlogn+n), Space Complexity: O(1)
// class Solution {
// public:
//     bool isAnagram(string s, string t) {
//         if(s.length()!=t.length()) return false;
//         sort(s.begin(), s.end());
//         sort(t.begin(), t.end());
//         for(int i=0; s[i]; i++){
//             if(s[i]!=t[i]) return false;
//         }
//         return true;
//     }
// };

// Time Complexity: O(n+26), Space Complexity: O(2n)
// class Solution {
// public:
//     bool isAnagram(string s, string t) {
//         if(s.length()!=t.length()) return false;
//         // std::unordered_map<char, int> umaps, umapt;
//         std::unordered_map<char, int> umaps;
//         for(int i=0; s[i]; i++){
//             umaps[s[i]]++;
//             // umapt[t[i]]++;
//             umaps[t[i]]--;
//         }
//         for(int i=0; i<26; i++){
//             // if(umaps['a'+i]!=umapt['a'+i]) return false;
//             if(umaps['a'+i]!=0) return false;
//         }
//         return true;
//     }
// };

// Time Complexity: O(26n), Space Complexity: O(1)
// class Solution {
// public:
//     bool isAnagram(string s, string t) { 
//         for(int i=0; i<26; i++){
//             if(count(s.begin(), s.end(), 'a'+i)!=count(t.begin(), t.end(), 'a'+i)) return false;
//         }
//         return true;
//     }
// };

Time Complexity: O(n+26), Space Complexity: O(26)
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length()!=t.length()) return false;
        vector<int> ans(26, 0);
        for(int i=0; s[i]; i++){
            ans[s[i]-'a']++;
            ans[t[i]-'a']--;
        }
        for(auto i:ans) if(i!=0) return false;
        return true;
    }
};
