//Solution1: this solution can be used in any orders, not only non-decreasing order
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        std::unordered_set<int> uset;
        int idx = 0;
        for(int i=0; i<nums.size(); i++){
            if(uset.find(nums[i])==uset.end()){
                uset.insert(nums[i]);
                nums[idx]=nums[i];
                idx++;
            }
        }
        return idx;
    }
};

//Solution 2: go through the whole vector and erase duplicate one
// class Solution {
// public:
//     int removeDuplicates(vector<int>& nums) {
//         int k = 1;
//         for(int i=1; i < nums.size();){
//             if(nums[i-1]!=nums[i]){
//                 k++;
//                 i++;
//             }
//             else{
//                 nums.erase(nums.begin()+i); //erase neens iterator to point location
//             }
//         }
//         return k;
//     }
// };

//Solution 3: create a new vector to store unique vector and replace it.
// class Solution {
// public:
//     int removeDuplicates(vector<int>& nums) {
//         vector<int> ans;
//         ans.push_back(nums[0]);
//         int j = 0, k = 1;
//         for(int i=0; i<nums.size(); i++){
//             if(ans[j]!=nums[i]){
//                 ans.push_back(nums[i]);
//                 k++;
//                 j++;
//             } 
//         }
//         ans.resize(nums.size(), 0);
//         nums = ans;
//         return k;
//     }
// };
