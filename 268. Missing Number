//Time Complexity: O(nlogn), Space Complexity: O(1)
// class Solution {
// public:
//     int missingNumber(vector<int>& nums) {
//         sort(nums.begin(),nums.end());
//         for(int i=1; i<nums.size();i++){
//             if(nums[i-1]+1!=nums[i]) return nums[i-1]+1;
//         }
//         if(nums[0]!=0) return 0;
//         else return nums[nums.size()-1]+1;
//     }
// };

//Time Complexity: O(n), Space Complexity: O(n)
// class Solution {
// public:
//     int missingNumber(vector<int>& nums) {
//         unordered_set<int> uset;
//         for(auto i:nums) uset.insert(i);
//         for(int i=0; i<=nums.size(); i++){
//             if(uset.insert(i).second) return i;
//         }
//         return 0;
//     }
// };

//Time Complexity: O(n), Space Complexity: O(1)
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int size = nums.size(), sum = (1+size)*size/2;
        for(int i=0; i<size; i++){
            sum -= nums[i];
        }
        return sum;
    }
};
