/*Question: find the target value in ascending order rotated array
1. use binary search:
    1) use start>=end to check all element
    2) if left side is ascending order:
        a) see if target inside the range of left. Yes-> end = mid - 1;
        b) target at the right side: start = mid + 1;
    3) if right side is ascending order:
        a) see if target inside the range of right. Yes-> start = mid + 1;
        b) target at the left side: end = mid - 1;
2. return -1 if not found;
*/

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start = 0, end = nums.size() - 1;
        while(start <= end){
            int mid = start + (end - start) / 2;
            if(nums[mid] == target) return mid;

            if(nums[start] <= nums[mid]){ //sorted in left
                if(nums[start] <= target && target < nums[mid]) end = mid - 1;
                else start = mid + 1;
            } 
            else{
                if(nums[mid] < target && target <= nums[end]) start = mid + 1;
                else end = mid - 1;
            }
        }
        return -1;
    }
};

// class Solution {
// public:
//     int search(vector<int>& nums, int target) {
//         int left = 0, right = nums.size()-1, mid;
//         while(left<=right){
//             mid = left + (right-left)/2;
//             if(nums[mid]==target) return mid;

//             // if(nums[mid]>=nums[left]){  //slow comparison
//             if(nums[mid]>=nums[0]){  // check in 1st part of array
//                 if(nums[mid]>=target && target>=nums[left])
//                     right = mid-1;
//                 else left = mid+1;
//             }
//             else{  // 2nd part of array
//                 if(nums[mid]<=target && target<=nums[right])
//                     left = mid+1;
//                 else right = mid-1;
//             }
//         }
//         return -1;
//     }
// };
