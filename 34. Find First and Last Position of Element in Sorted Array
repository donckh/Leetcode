/* Question: find the index range of target 
1. use 2 binary search:
    1) find the beginning target index
        a) if nums[mid] <= target, the begin target in the left
        b) in the right
        c) record the index
    2) find the end target index
        a) if nums[mid] >= target, the end target in the right
        b) in the left
        c) record the index
2. return both begin and end index
*/

class Solution {
public:
    int findFirst(vector<int>& nums, int target){
        int start = 0, end = nums.size()-1, ans = -1;
        while(start<=end){
            int mid = start + (end - start) / 2;
            if(nums[mid] >= target) end = mid - 1;
            else start = mid + 1;
            if(target==nums[mid]) ans = mid;
        }
        return ans;
    } 
    int findEnd(vector<int>& nums, int target){
        int start = 0, end = nums.size()-1, ans = -1;
        while(start<=end){
            int mid = start + (end - start) / 2;
            if(nums[mid] <= target) start = mid + 1;
            else end = mid - 1;
            if(target==nums[mid]) ans = mid;
        }
        return ans;
    } 
    vector<int> searchRange(vector<int>& nums, int target) {
        return {findFirst(nums, target), findEnd(nums, target)};
    }
};

//Time Complexity:O(logn), Space Complexity:O(1)
// class Solution {
// public:
//     vector<int> searchRange(vector<int>& nums, int target) {
//         int left=0, len = nums.size(), right = len-1, mid, start=-1, end=-1;
//         while(left<=right){
//             mid = (left+right)/2;
//             if(nums[mid]<target) left = mid+1;
//             else if(nums[mid]>target) right = mid-1;
//             else{
//                 start = mid;
//                 right = mid-1;
//             }
//         }
//         if(start==-1) return {start, end};
//         left = 0, right = len-1;
//         while(left<=right){
//             mid = (left+right)/2;
//             if(nums[mid]<target) left = mid+1;
//             else if(nums[mid]>target) right = mid-1;
//             else{
//                 end = mid;
//                 left = mid+1;
//             }
//         }
//         return {start, end};
//     }
// };
