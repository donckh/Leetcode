//Time Complexity:O(logn), Space Complexity:O(1)
// class Solution {
// public:
//     vector<int> searchRange(vector<int>& nums, int target) {
//         int left=0, len = nums.size(), right = len-1, mid;
//         vector<int> ans(2);
//         ans[0] = ans[1] = -1;
//         if(len<=0) return ans;
//         while(left<=right){
//             mid = (right+left)/2;
//             if(nums[mid]==target){ 
//                 left = right = mid;
//                 break;
//             }
//             if(nums[mid]<target) left = mid+1;
//             else  right = mid-1;
//         }
//         if(nums[mid]!=target) return ans;
//         while(left>=0 && nums[left]==target)left--;
//         while(right<len && nums[right]==target) right++;
//         ans[0] = left+1;
//         ans[1] = right-1;
//         return ans;
//     }
// };

//Time Complexity:O(logn), Space Complexity:O(1)
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left=0, len = nums.size(), right = len-1, mid, start=-1, end=-1;
        while(left<=right){
            mid = (left+right)/2;
            if(nums[mid]<target) left = mid+1;
            else if(nums[mid]>target) right = mid-1;
            else{
                start = mid;
                right = mid-1;
            }
        }
        if(start==-1) return {start, end};
        left = 0, right = len-1;
        while(left<=right){
            mid = (left+right)/2;
            if(nums[mid]<target) left = mid+1;
            else if(nums[mid]>target) right = mid-1;
            else{
                end = mid;
                left = mid+1;
            }
        }
        return {start, end};
    }
};
