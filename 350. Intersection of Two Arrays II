//Time Complexity: O(n), Space Complexity: O(n)
// class Solution {
// public:
//     vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
//         unordered_map<int, int> umap;
//         vector<int> ans;
//         for(int i=0; i<nums1.size(); i++){
//             umap[nums1[i]]++;
//         }
//         for(int j=0; j<nums2.size(); j++){
//             if(umap[nums2[j]]){
//                 umap[nums2[j]]--;
//                 ans.push_back(nums2[j]);
//             }
//         }
//         return ans;
//     }
// };

//Time Complexity: O(nlogn), Space Complexity: O(1)
// class Solution {
// public:
//     vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
//         sort(nums1.begin(), nums1.end());
//         sort(nums2.begin(), nums2.end());
//         int len1=nums1.size(), len2=nums2.size(), i=0, j=0;
//         vector<int> ans;
//         while(i<len1 && j<len2){
//             if(nums1[i]==nums2[j]){
//                 ans.push_back(nums1[i]);
//                 i++;
//                 j++;
//             }
//             else if(nums1[i]<nums2[j]) i++;
//             else j++;
//         }
//         return ans;
//     }
// };

//Time Complexity: O(n), Space Complexity: O(n)
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> umap1, umap2;
        int i=0, j=0, len1=nums1.size(), len2=nums2.size();
        vector<int> ans;
        while(i<len1 && j<len2){
            if(umap2[nums1[i]]){ 
                umap2[nums1[i]]--;
                ans.push_back(nums1[i]);
            }
            else umap1[nums1[j]]++;
            if(umap1[nums2[j]]){ 
                umap1[nums2[j]]--;
                ans.push_back(nums2[j]);
            }
            else umap2[nums2[j]]++;
            i++;
            j++;
        }
        while(i<len1){
            if(umap2[nums1[i]]){ 
                umap2[nums1[i]]--;
                ans.push_back(nums1[i]);
            }
            i++;
        }
        while(j<len2){
            if(umap1[nums2[j]]){ 
                umap1[nums2[j]]--;
                ans.push_back(nums2[j]);
            }
            j++;
        }
        
        return ans;
    }
};
