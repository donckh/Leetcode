/* Question: return the kth min Sum whici consist of nums1 and nums2
1. put all nums1 value with nums2[0] in priority queue(pq)
2. push the first min Sum to result
3. push the next sum (j+1) in the pq;
4. repeat 2 and 3 until kth min Sum
*/
class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        vector<vector<int>> res;
        for(int i=0; i<nums1.size(); i++) pq.push({nums1[i]+nums2[0], {i, 0}}); //initial all the index and sort by min
        
        while(k){
            //get the min sum and idx and pop
            int sum = pq.top().first;
            int i = pq.top().second.first;
            int j = pq.top().second.second;
            pq.pop();
            res.push_back({nums1[i], nums2[j]});
            k--;
            if(j+1 < nums2.size()) pq.push({nums1[i]+nums2[j+1], {i, j+1}}); //push next sum and idx to pq
        }
        return res;
    }
};
