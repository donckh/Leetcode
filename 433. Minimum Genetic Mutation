/* Question: given string start, check the step which start change to end(every step can change only 1 char)
1. use uset to check every step is valid
2. create a queue to run BFS (record every step and element)
3. use visited to skip all string which already visited
4. check every char of string with gene
5. skip if char it the same
6. check if the new change is valid or visited
7. record in queue for next loop
8. return 0 if not found
*/

class Solution {
public:
    int minMutation(string startGene, string endGene, vector<string>& bank) {
        unordered_set<string> set(bank.begin(), bank.end());
        if(!set.count(endGene)) return -1;
        queue<pair<string, int>> q;
        q.push({startGene, 0});
        unordered_set<string> visited;
        vector<char> gene = {'A', 'C', 'G', 'T'};
        while(!q.empty()){
            auto[curr, step] = q.front(); q.pop();
            if(curr == endGene) return step;
            for(int i=0; i<curr.size(); i++){
                char original = curr[i];
                for(char g: gene){
                    if(g==original) continue;
                    curr[i] = g;
                    if(set.count(curr) && !visited.count(curr)){
                        visited.insert(curr);
                        q.push({curr, step+1});
                    }
                }
                curr[i] = original;
            }
        }
        return -1;
    }
};
