/* Question: find the less arrow to burst all balloons
1. sort point by xend (greedy)
2. check if xstart > xend, 1 arrow
3. return arrow
*/

class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        sort(points.begin(), points.end(), [](const auto& a, const auto& b) {
            return a[1] < b[1];  //sort by xend
        });
        int end = points[0][1], arrow = 1;
        for(int i=1; i<points.size(); i++){
            if(points[i][0]>end){
                arrow++;
                end = points[i][1];
            }
        }
        return arrow;
    }
};

/*
1. merge all xstart, xend
2. return resultsize
*/
// class Solution {
// public:
//     int findMinArrowShots(vector<vector<int>>& points) {
//         int cnt = 0, end = points[0][0];
//         sort(points.begin(), points.end());
//         vector<vector<int>> result;
//         for(auto& i: points){
//             if(result.empty()||result.back()[1]<i[0]) 
//                 result.push_back(i);
//             else{
//                 result.back()[0] = max(result.back()[0], i[0]);
//                 result.back()[1] = min(result.back()[1], i[1]);
//             } 
//         }
//         return result.size();
//     }
// };
