//Time Complexity: O(n), Space Complexity: O(1)
// class Solution {
// public:
//     double myPow(double x, int n) {
//         if(n==0) return 1;   //special case
//         else if(n==INT_MAX){
//             if(x==1) return 1;
//             else if(x==-1) return -1;
//             else return 0;
//         }
//         else if(n==INT_MIN){
//             if(x==1||x==-1) return 1;
//             else return 0;
//         }
//         double temp = x;
//         while(n>1){ 
//             x *= temp;
//             n--;
//         }
//         while(n<-1){
//             x *= temp;
//             n++;
//         }
//         if(n==-1) x = 1/x;
//         return x;
//     }
// };

//Time Complexity: O(logn), Space Complexity: O(1)
class Solution {
public:
    double myPow(double x, int n) {
        if(n==0) return 1;
        else if(n%2==1) return x * myPow(x, n-1);
        else if(n%2==0) return myPow(x*x, n/2);  // use (x^2)^(n/2) to minimize runtime
        else return 1/myPow(x, -n);  // inverse of x^n
    }
};
