/* Question: use binary exponentiation to quick calculate the result.
1st method:
1. use recursive way:
    1) return 1 if n==0
    2) if n is odd num, return x*myPow(x, n-1)
    3) if n is even num, return myPow(x*x, n/2) //binary exponentiation
    4. return 1/myPow
2nd method:
2. use iteration:
    1) return 1 if n==0
    2) if odd num, res *= x //including the last loop n==1
    3) if even, x *= x
return res;
*/

class Solution {
public:
    double myPow(double x, int n) {
        if(n==0) return 1;
        long long N = n;
        double res = 1.0;
        if(N < 0){
            N = -N;
            x = 1 / x;
        }

        while(N > 0){
            if(N % 2 == 1) res *= x;
            x *= x;
            N /= 2;
        }

        return res;
    }
};

// Time Complexity: O(logn), Space Complexity: O(1)
// class Solution {
// public:
//     double myPow(double x, int n) {
//         if(n == 0) return 1.0;
//         else if(n % 2 == 1) return x * myPow(x, n-1);
//         else if(n % 2 == 0) return myPow(x*x, n/2);
//         else return 1/myPow(x, -n);
//     }
// };
