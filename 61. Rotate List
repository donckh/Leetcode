/* Question: rotate the list from tail to head node by k times
1. count the len of list
2. connect the tail to the head
3. find the new tail by len-k-1 and discconect the next node
4. return result
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL) return NULL;
        if(k==0) return head;
        ListNode *tail = head;
        int len=1;
        while(tail -> next!=NULL){
            tail = tail -> next;
            len++;
        }
        tail -> next = head;

        k = k % len;
        ListNode *newTail = head;
        while(len - k>1){
            newTail = newTail->next;
            k++;
        }

        ListNode *result = newTail;
        result = result->next;
        newTail -> next = NULL;
        return result;
    }
};
