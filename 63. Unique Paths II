/* Question: find the possible path from top left to bottom right, the robot can only move down or right 
1. initial a vector to record unique path num
2. initial the 1st row and column as 1 if no obstacle(1)
3. go through the grid and sum top and left path
4. return the last element as a result
*/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();
        vector<vector<int>> res(m, vector<int> (n, 0));
        for(int i=0; i<m; i++){
            if(obstacleGrid[i][0]==0) res[i][0] = 1;
            else break;
        }

        for(int j=0; j<n; j++){
            if(obstacleGrid[0][j]==0) res[0][j] = 1;
            else break;
        }

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                if(obstacleGrid[i][j]==0) res[i][j] = res[i-1][j] + res[i][j-1];
                else res[i][j] = 0;
            }
        }
        return res[m-1][n-1];
    }
};
