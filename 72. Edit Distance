/* Question: find the min operation convert word1 to word2
1. initial dp(m+1, (n+1, 0))
2. initial empty word2 as dp[i][0] 
3. initial empty word1 as dp[0][j] 
4. find the min operation: 1 + min(insert, delete, replace)
5. return result
*/
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(m+1, vector<int> (n+1, 0));
        
        for(int i=0; i<=m; i++) dp[i][0] = i;
        for(int j=0; j<=n; j++) dp[0][j] = j;

        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                if(word1[i-1]==word2[j-1]) dp[i][j] = dp[i-1][j-1];
                else{
                    dp[i][j] = 1 + min({dp[i-1][j], dp[i][j-1], dp[i-1][j-1]});
                }
            }
        }
        return dp[m][n];
    }
};
