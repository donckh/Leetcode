/*Question: binary search a matrix
1. consider a matrix in 2D (m*n-1)
2. mid = start + (end-start)/2
3. check the matrix[mid/n][mid%n] == target 
    1) return true
    2) search left or right
4.return false
*/

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        int left = 0, right = m * n-1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            int val = matrix[mid/n][mid%n];
            if(val==target) return true;
            else if(val<target) left = mid+1;
            else right = mid-1;
        }
        return false;
    }
};

// class Solution {
// public:
//     bool binarySearch(vector<vector<int>>& matrix, int target, int start, int end, int n){
//         if(start > end) return false;
//         int mid = start + (end - start) / 2;
//         int val = matrix[mid/n][mid%n];
//         if(val==target) return true;
//         else if(val<target) return binarySearch(matrix, target, mid+1, end, n);
//         else return binarySearch(matrix, target, start, mid-1, n);
//     }

//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         int m = matrix.size();
//         int n = matrix[0].size();
//         return binarySearch(matrix, target, 0, m*n-1, n);
//     }
// };
