class Solution {
public:
    int inf=999999;
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        int count=n, min=0, idx=--k;
        int cost[n][n];  //from 0 to n x 0 to n matrix
        vector<int> group(n,0); //start from 0 to n
        vector<int> dis(n,inf);
        //initial array and vector for further use
        for(int i=0; i<n; ++i){
            group[i]=i;
            for(int j=0;j<n;++j){
                if (i==j) cost[i][j]=0;
                else cost[i][j]= inf;
            }
        }
        //create connection btw initial array
        for (int i=0; i<times.size();++i){
            cost[times[i][0]-1][times[i][1]-1]=times[i][2];
        }
        /*Dijkstra: 
        1. update edge by selected vertex to others, min: min selected edge
        2. remove selected vertex (by idx)
        3. find min edge from remaining vertex
        4. update min, idx of min edge
        */
        while(count--){
            for(int i=0; i<n;++i){
                if (dis[i]> min+cost[k][i]) dis[i]= min+cost[k][i];
            }
            if(idx<group.size()) group.erase(group.begin()+idx);  //delete 1 node k;
            min=inf;
            for(int i=0; i<group.size();++i){  //get remain node from group
                if(min>dis[group[i]]) {
                    min=dis[group[i]];  //min value
                    k=group[i];  //min value index
                    idx=i;
                }
            }
        }
        int ans=0;
        for(int i=0; i<n;++i){
            ans = max(ans, dis[i]);
        }
        if (ans==inf) return -1;
        else return ans;   
    }
};
