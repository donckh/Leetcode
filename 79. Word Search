//Time Complexity: O(mn), Space Complexity: O(1)
class Solution {
public:
    bool dfs(vector<vector<char>> &board, int i, int j, string word, int count){
        if(count==word.length()) return true; //count mean string found from board
        if(i<0||i>=board.size()||j<0||j>=board[0].size()||word[count]!=board[i][j]) return false;

        char temp = board[i][j];
        board[i][j] = ' ';  // remove board element to prevent repeat
        bool ans = dfs(board, i+1, j, word, count+1) ||
                   dfs(board, i, j+1, word, count+1) ||
                   dfs(board, i-1, j, word, count+1) ||
                   dfs(board, i, j-1, word, count+1);
        board[i][j] = temp;  // recover board for next for loop
        return ans;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int m=board.size(), n=board[0].size(), left=0, right=0, len=word.length();
        if(len>m*n) return false;
        for(int i=1; i<len; i++){
            if(word[i-1]!=word[i]) break;
            left++;
        }
        for(int i=len-2; i>=0; i--){
            if(word[i]==word[i+1]) break;
            right++;
        }
        if(left>right) reverse(word.begin(), word.end()); //repeat char will cause more recursive
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(board[i][j]==word[0] && dfs(board, i, j, word, 0)) return true; //if dfs found word
            }
        }
        return false;
    }
};
